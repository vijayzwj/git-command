
-------------------查找冲突文件
配置冲突快捷命令：git config --global alias.conflicts "diff --name-only --diff-filter=u"
      git conflicts

或者 git diff --name-only --diff-filter=U



------------------bug 修复 cherry-pick 同步至master

master分支   git log   bug修复的hash commit

git checkout  stable1.1

git cherry-pick   commit-hash

可能出现冲突，解决方案

1.解决冲突

2.git cherry-pick --abort

  git push -u origin branch_xx

---------------------git merge与git rebase

1.git merge 形成1个新的commit追加

2.git rebase 变基，将之前的commit 变过去

git add .
git rebase --continue


------------------------------知识普及
git cherry-pick  

git pull                 = git fetch + git merge

git pull --rebase =git fetch + git rebase



---查看日志信息
 git log --graph --pretty=oneline --abbrev-commit


 如果要强行删除，需要使用命令git branch -D feature-vulcan


git stash
git pull
git stash pop
git add -u
git add 
git commit -m ""
git push origin HEAD:refs/for/branch_name



******************************************将branch_dev 合并到 trunk**************************************
例如将branch_dev 合并到 trunk

在branch_dev下执行

git checkout -b local  远程分支

git checkout trunk

git merge --squash local

git add -u

git commit -m "合并branch_dev到trunk"

git push origin HEAD:refs/for/trunk


****************************************Bug修复*****************************************************

软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，
所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

1 首先保存当前dev开发分支 git stash

2 基于修复版本拉取本地分支 issue-101    git checkout -b issue-101

           git checkout -b branch(本地) origin/branch(远程)

3 修复后git add  git commit 

4 切换到修复版本 git master     git merge --no-ff -m "merged bug fix 101" issue-101

5 最后回到开发版本 git checkout dev     git stash pop

6 最后提交git push origin HEAD:refs/for/master


****************************************************************************************

git add abc.txt bcd.txt

git commit  -m 'abc.txt bcd.txt'

此时如果要撤销abc.txt

git rm --cached abc.txt

git commit --amend --allow-empty -m "bcd.txt"


最终2次commit合并成一个commit为  “bcd.txt”


**********************************************************************************************
---拉分支+推送到远程
git checkout -b  本地名称(本地名称) 远程名称(origin/zhouleihlwrjeb)
git push origin test

---删除远程分支  
git branch -r -d origin/branch-name 
git push origin :branch-name 

***********************************************************************************************
**************************************打Tag**************************************

1  创建和删除Tag
     a> 本地创建：git tag tag_remote_branch_feture  远程创建：git push origin  tag_remote_branch_feture
     b> 本地删除：git tag -d  tag_remote_branch_feture  远程删除：git push origin :refs/tags/tag_remote_branch_feture

2  还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：

     $ git tag -a tag_remote_branch_feture -m "version 0.1 released" 1094adb(commit-id) 

-----------------------标签是用于标识代码库中的特定版本或里程碑的静态快照。


Git撤销与回滚
  在未进行git push前的所有操作，都是在“本地仓库”中执行的。我们暂且将“本地仓库”的代码还原操作叫做“撤销”！
  情况一：文件被修改了，但未执行git add操作（working tree内撤销）
    git checkout fileName
    git checkout .
  情况二：同时对多个文件执行了git add操作，但本次只想提交其中一部分文件
    $ git add *
    $ git status
    # 取消暂存
    $ git reset HEAD <filename>
 情况三：文件执行了git add操作，但想撤销对其的修改（index内回滚）
    # 取消暂存
    git reset HEAD fileName
    # 撤销修改
    git checkout fileName 
 情况四：修改的文件已被git commit，但想再次修改不再产生新的Commit
   # 修改最后一次提交 
   $ git add sample.txt
   $ git commit --amend -m"说明"
 情况五：已在本地进行了多次git commit操作，现在想撤销到其中某次Commit
   git reset [--hard|soft|mixed|merge|keep] [commit|HEAD]  


回滚
进行git push，即已推送到“远程仓库”中。我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”！
注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！   

情况一：撤销指定文件到指定版本
   # 查看指定文件的历史版本
   git log <filename>
   # 回滚到指定commitID
   git checkout <commitID> <filename>

情况二：删除最后一次远程提交
  方式一：使用revert
       git revert HEAD
       git push origin master

  方式二：使用reset
        git reset --hard HEAD^
        git push origin master -f

二者区别：
revert 是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；
reset 是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。

情况三：回滚某次提交
   # 找到要回滚的commitID
   git log
   git revert commitID

删除某次提交
    git log --oneline -n5
    git rebase -i "commit id"^
    git push origin master -f
    
    

   
    
    
  
  

