提交
git add .
git commit -m "fixed some bugs"
git tag -a 0.1.3 -m "Release version 0.1.3"
分享提交标签到远程服务器上

git push origin master
git push origin --tags
–tags参数表示提交所有tag至服务器端，普通的git push origin master操作不会推送标签到服务器端。

删除标签的命令
git tag -d 0.1.3
删除远端服务器的标签
git push origin :refs/tags/0.1.3

---标签
git tag -a V1.2 -m 'WebSite version 1.2'
git push origin --tags


---删除远程分支  
git branch -r -d origin/branch-name 
git push origin :branch-name 
---删除标签Tag
git tag -d V1.2
git push origin :refs/tags/V1.2


---查看日志信息
 git log --graph --pretty=oneline --abbrev-commit


 如果要强行删除，需要使用命令git branch -D feature-vulcan


git stash
git pull
git stash pop
git add -u
git add 
git commit -m ""
git push origin HEAD:refs/for/branch_name


---拉分支+推送到远程
git branch test
git push origin test


******************************************将branch_dev 合并到 trunk**************************************
例如将branch_dev 合并到 trunk

在branch_dev下执行

git checkout -b local  远程分支

git checkout trunk

git merge --squash local

git add -u

git commit -m "合并branch_dev到trunk"

git push origin HEAD:refs/for/trunk


****************************************Bug修复*****************************************************

软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，
所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

1 首先保存当前dev开发分支 git stash

2 基于修复版本拉取本地分支 issue-101    git checkout -b issue-101

           git checkout -b branch(本地) origin/branch(远程)

3 修复后git add  git commit 

4 切换到修复版本 git master     git merge --no-ff -m "merged bug fix 101" issue-101

5 最后回到开发版本 git checkout dev     git stash pop

6 最后提交git push origin HEAD:refs/for/master


****************************************************************************************

git add abc.txt bcd.txt

git commit  -m 'abc.txt bcd.txt'

此时如果要撤销abc.txt

git rm --cached abc.txt

git commit --amend --allow-empty -m "bcd.txt"


最终2次commit合并成一个commit为  “bcd.txt”















